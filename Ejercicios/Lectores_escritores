import threading
import time

class AreaCompartida:
    def __init__(self):
        self.datos = []
        self.semaforo1 = threading.Semaphore(1)
        self.escritores_sem = threading.Semaphore(1)
        self.num_lectores = 0

    def empezar_lectura(self, lector):
        with self.semaforo1:
            self.num_lectores += 1
            if self.num_lectores == 1:
                self.escritores_sem.acquire()
        print(f"Lector {lector} ha empezado a leer.")

    def terminar_lectura(self, lector):
        with self.semaforo1:
            self.num_lectores -= 1
            if self.num_lectores == 0:
                self.escritores_sem.release()
        print(f"Lector {lector} ha terminado de leer.")

    def empezar_escritura(self, escritor):
        self.escritores_sem.acquire()
        print(f"Escritor {escritor} ha empezado a escribir.")

    def terminar_escritura(self, escritor):
        self.escritores_sem.release()
        print(f"Escritor {escritor} ha terminado de escribir.")

def lector(area_compartida, lector):
    while True:
        area_compartida.empezar_lectura(lector)
        print(f"Lector {lector} est√° leyendo ")
        area_compartida.terminar_lectura(lector)
        time.sleep(2)

def escritor(area_compartida, escritor):
    while True:
        area_compartida.empezar_escritura(escritor)
        texto = ('Holi Carlos')
        area_compartida.datos.append(texto)
        print(f"Escritor {escritor} ha escrito: {texto}")
        area_compartida.terminar_escritura(escritor)
        time.sleep(2)

if __name__ == "__main__":
    area_compartida = AreaCompartida()

    lectores = [threading.Thread(target=lector, args=(area_compartida, i)) for i in range(2)]
    escritores = [threading.Thread(target=escritor, args=(area_compartida, i)) for i in range(2)]

    for hilo in lectores + escritores:
        hilo.start()

    for hilo in lectores + escritores:
        hilo.join()
